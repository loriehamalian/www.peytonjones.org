@inproceedings{peytonjones2013exploiting,
author = {Peyton Jones, Simon and Mainland, Geoff and Marlow, Simon and Leshchinskiy, Roman},
title = {Exploiting vector instructions with generalized stream fusion},
booktitle = {ACM SIGPLAN International Conference on Functional Programming (ICFP '13)},
year = {2013},
month = {September},
abstract = {Stream fusion is a powerful technique for automatically transforming high-level sequence-processing functions into efficient implementations. It has been used to great effect in Haskell libraries for manipulating byte arrays, Unicode text, and unboxed vectors. However, some operations, like vector append, still do not perform well within the standard stream fusion framework. Others, like SIMD computation using the SSE and AVX instructions available on modern x86 chips, do not seem to fit in the framework at all.

In this paper we introduce generalized stream fusion, which solves these issues. The key insight is to bundle together multiple stream representations, each tuned for a particular class of stream consumer. We also describe a stream representation suited for efficient computation with SSE instructions. Our ideas are implemented in modified versions of the GHC compiler and vector library. Benchmarks show that high-level Haskell code written using our compiler and libraries can produce code that is competitive with hand-tuned assembly.},
url = {https://www.microsoft.com/en-us/research/publication/exploiting-vector-instructions-with-generalized-stream-fusion/},
edition = {ACM SIGPLAN International Conference on Functional Programming (ICFP â€™13)},
}