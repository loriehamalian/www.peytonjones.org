@inproceedings{downen2020kinds,
author = {Downen, Paul and Ariola, Zena and Peyton Jones, Simon and Eisenberg, Richard},
title = {Kinds are calling conventions},
organization = {ACM},
booktitle = {International Conference on Functional Programming (ICFP'20)},
year = {2020},
month = {August},
<<<<<<< HEAD
abstract = {A language supporting polymorphism is a boon to programmers: they can express complex ideas once and reuse functions in a variety of situations. However, polymorphism is pain for compilers tasked with producing efficient code that manipulates concrete values.

=======
abstract = {A language supporting polymorphism is a boon to programmers: they can express complex ideas once and reuse functions in a variety of situations. However, polymorphism is pain for compilers tasked with producing efficient code that manipulates concrete values.

>>>>>>> 65d6fba98a5fe668fc671c5b3ec57090393e006b
This paper presents a new intermediate language that allows efficient static compilation, while still supporting flexible polymorphism. Specifically, it permits polymorphism over not only the types of values, but also the representation of values, the arity of machine functions, and the evaluation order of arguments---all three of which are useful in practice. The key insight is to encode information about a value's calling convention in the kind of its type, rather than in the type itself.},
publisher = {ACM},
url = {https://www.microsoft.com/en-us/research/publication/kinds-are-calling-conventions/},
}