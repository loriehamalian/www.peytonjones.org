@inproceedings{weirich2011generative,
author = {Weirich, Stephanie and Vytiniotis, Dimitrios and Peyton Jones, Simon and Zdancewic, Steve},
title = {Generative type abstraction and type-level computation},
booktitle = {Proceedings of the 38th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
year = {2011},
month = {January},
abstract = {Modular languages support generative type abstraction, ensuring that an abstract type is distinct from its representation, except inside the implementation where the two are synonymous. We show that this well-established feature is in tension with the non-parametric features of newer type systems, such as indexed type families and GADTs. In this paper we solve the problem by using kinds to distinguish between parametric and non-parametric contexts. The result is directly applicable to Haskell, which is rapidly developing support for type-level computation, but the same issues should arise whenever generativity and non-parametric features are combined.},
publisher = {ACM SIGPLAN},
url = {https://www.microsoft.com/en-us/research/publication/generative-type-abstraction-and-type-level-computation/},
edition = {Proceedings of the 38th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
}